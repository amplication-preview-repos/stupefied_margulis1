/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Borrow as PrismaBorrow,
  Book as PrismaBook,
  Member as PrismaMember,
} from "@prisma/client";

export class BorrowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BorrowCountArgs, "select">): Promise<number> {
    return this.prisma.borrow.count(args);
  }

  async borrows<T extends Prisma.BorrowFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BorrowFindManyArgs>
  ): Promise<PrismaBorrow[]> {
    return this.prisma.borrow.findMany<Prisma.BorrowFindManyArgs>(args);
  }
  async borrow<T extends Prisma.BorrowFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BorrowFindUniqueArgs>
  ): Promise<PrismaBorrow | null> {
    return this.prisma.borrow.findUnique(args);
  }
  async createBorrow<T extends Prisma.BorrowCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BorrowCreateArgs>
  ): Promise<PrismaBorrow> {
    return this.prisma.borrow.create<T>(args);
  }
  async updateBorrow<T extends Prisma.BorrowUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BorrowUpdateArgs>
  ): Promise<PrismaBorrow> {
    return this.prisma.borrow.update<T>(args);
  }
  async deleteBorrow<T extends Prisma.BorrowDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BorrowDeleteArgs>
  ): Promise<PrismaBorrow> {
    return this.prisma.borrow.delete(args);
  }

  async getBook(parentId: string): Promise<PrismaBook | null> {
    return this.prisma.borrow
      .findUnique({
        where: { id: parentId },
      })
      .book();
  }

  async getMember(parentId: string): Promise<PrismaMember | null> {
    return this.prisma.borrow
      .findUnique({
        where: { id: parentId },
      })
      .member();
  }
}
