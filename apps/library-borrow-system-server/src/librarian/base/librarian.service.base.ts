/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Librarian as PrismaLibrarian } from "@prisma/client";

export class LibrarianServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LibrarianCountArgs, "select">
  ): Promise<number> {
    return this.prisma.librarian.count(args);
  }

  async librarians<T extends Prisma.LibrarianFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibrarianFindManyArgs>
  ): Promise<PrismaLibrarian[]> {
    return this.prisma.librarian.findMany<Prisma.LibrarianFindManyArgs>(args);
  }
  async librarian<T extends Prisma.LibrarianFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibrarianFindUniqueArgs>
  ): Promise<PrismaLibrarian | null> {
    return this.prisma.librarian.findUnique(args);
  }
  async createLibrarian<T extends Prisma.LibrarianCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibrarianCreateArgs>
  ): Promise<PrismaLibrarian> {
    return this.prisma.librarian.create<T>(args);
  }
  async updateLibrarian<T extends Prisma.LibrarianUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibrarianUpdateArgs>
  ): Promise<PrismaLibrarian> {
    return this.prisma.librarian.update<T>(args);
  }
  async deleteLibrarian<T extends Prisma.LibrarianDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibrarianDeleteArgs>
  ): Promise<PrismaLibrarian> {
    return this.prisma.librarian.delete(args);
  }
}
