/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Borrow } from "./Borrow";
import { BorrowCountArgs } from "./BorrowCountArgs";
import { BorrowFindManyArgs } from "./BorrowFindManyArgs";
import { BorrowFindUniqueArgs } from "./BorrowFindUniqueArgs";
import { CreateBorrowArgs } from "./CreateBorrowArgs";
import { UpdateBorrowArgs } from "./UpdateBorrowArgs";
import { DeleteBorrowArgs } from "./DeleteBorrowArgs";
import { Book } from "../../book/base/Book";
import { Member } from "../../member/base/Member";
import { BorrowService } from "../borrow.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Borrow)
export class BorrowResolverBase {
  constructor(
    protected readonly service: BorrowService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Borrow",
    action: "read",
    possession: "any",
  })
  async _borrowsMeta(
    @graphql.Args() args: BorrowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Borrow])
  @nestAccessControl.UseRoles({
    resource: "Borrow",
    action: "read",
    possession: "any",
  })
  async borrows(@graphql.Args() args: BorrowFindManyArgs): Promise<Borrow[]> {
    return this.service.borrows(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Borrow, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Borrow",
    action: "read",
    possession: "own",
  })
  async borrow(
    @graphql.Args() args: BorrowFindUniqueArgs
  ): Promise<Borrow | null> {
    const result = await this.service.borrow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Borrow)
  @nestAccessControl.UseRoles({
    resource: "Borrow",
    action: "create",
    possession: "any",
  })
  async createBorrow(@graphql.Args() args: CreateBorrowArgs): Promise<Borrow> {
    return await this.service.createBorrow({
      ...args,
      data: {
        ...args.data,

        book: args.data.book
          ? {
              connect: args.data.book,
            }
          : undefined,

        member: args.data.member
          ? {
              connect: args.data.member,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Borrow)
  @nestAccessControl.UseRoles({
    resource: "Borrow",
    action: "update",
    possession: "any",
  })
  async updateBorrow(
    @graphql.Args() args: UpdateBorrowArgs
  ): Promise<Borrow | null> {
    try {
      return await this.service.updateBorrow({
        ...args,
        data: {
          ...args.data,

          book: args.data.book
            ? {
                connect: args.data.book,
              }
            : undefined,

          member: args.data.member
            ? {
                connect: args.data.member,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Borrow)
  @nestAccessControl.UseRoles({
    resource: "Borrow",
    action: "delete",
    possession: "any",
  })
  async deleteBorrow(
    @graphql.Args() args: DeleteBorrowArgs
  ): Promise<Borrow | null> {
    try {
      return await this.service.deleteBorrow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Book, {
    nullable: true,
    name: "book",
  })
  @nestAccessControl.UseRoles({
    resource: "Book",
    action: "read",
    possession: "any",
  })
  async getBook(@graphql.Parent() parent: Borrow): Promise<Book | null> {
    const result = await this.service.getBook(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Member, {
    nullable: true,
    name: "member",
  })
  @nestAccessControl.UseRoles({
    resource: "Member",
    action: "read",
    possession: "any",
  })
  async getMember(@graphql.Parent() parent: Borrow): Promise<Member | null> {
    const result = await this.service.getMember(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
