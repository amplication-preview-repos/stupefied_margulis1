/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Librarian } from "./Librarian";
import { LibrarianCountArgs } from "./LibrarianCountArgs";
import { LibrarianFindManyArgs } from "./LibrarianFindManyArgs";
import { LibrarianFindUniqueArgs } from "./LibrarianFindUniqueArgs";
import { CreateLibrarianArgs } from "./CreateLibrarianArgs";
import { UpdateLibrarianArgs } from "./UpdateLibrarianArgs";
import { DeleteLibrarianArgs } from "./DeleteLibrarianArgs";
import { LibrarianService } from "../librarian.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Librarian)
export class LibrarianResolverBase {
  constructor(
    protected readonly service: LibrarianService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Librarian",
    action: "read",
    possession: "any",
  })
  async _librariansMeta(
    @graphql.Args() args: LibrarianCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Librarian])
  @nestAccessControl.UseRoles({
    resource: "Librarian",
    action: "read",
    possession: "any",
  })
  async librarians(
    @graphql.Args() args: LibrarianFindManyArgs
  ): Promise<Librarian[]> {
    return this.service.librarians(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Librarian, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Librarian",
    action: "read",
    possession: "own",
  })
  async librarian(
    @graphql.Args() args: LibrarianFindUniqueArgs
  ): Promise<Librarian | null> {
    const result = await this.service.librarian(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Librarian)
  @nestAccessControl.UseRoles({
    resource: "Librarian",
    action: "create",
    possession: "any",
  })
  async createLibrarian(
    @graphql.Args() args: CreateLibrarianArgs
  ): Promise<Librarian> {
    return await this.service.createLibrarian({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Librarian)
  @nestAccessControl.UseRoles({
    resource: "Librarian",
    action: "update",
    possession: "any",
  })
  async updateLibrarian(
    @graphql.Args() args: UpdateLibrarianArgs
  ): Promise<Librarian | null> {
    try {
      return await this.service.updateLibrarian({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Librarian)
  @nestAccessControl.UseRoles({
    resource: "Librarian",
    action: "delete",
    possession: "any",
  })
  async deleteLibrarian(
    @graphql.Args() args: DeleteLibrarianArgs
  ): Promise<Librarian | null> {
    try {
      return await this.service.deleteLibrarian(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
